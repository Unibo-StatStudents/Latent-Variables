library(poLCA)
data(carcinoma)
?carcinoma
head(carcinoma)
?poLCA
formula<-cbind(A,B,C,D,E,F,G)~1
# Fitting 3 different models
m.2<-poLCA(formula,carcinoma,nclass=2,nrep=10,verbose=FALSE)
m.3<-poLCA(formula,carcinoma,nclass=3,nrep=10,verbose=FALSE)
m.4<-poLCA(formula,carcinoma,nclass=4,nrep=10,verbose=FALSE)
freq.estim<-data.frame(m.2$predcell[1:9],m.3$predcell[9],m.4$predcell[9])
freq.estim
freq.estim<-data.frame(m.2$predcell[1:9],m.3$predcell[9],m.4$predcell[9])
freq.estim
llik<-c(m.2$llik,m.3$llik,m.4$llik)
K<-c("2", "3", "4")
# loglikelihood
llik<-c(m.2$llik,m.3$llik,m.4$llik)
# increasing number of parameters
npar<-c(m.2$npar,m.3$npar,m.4$npar)
# LR test
Gsq<-round(c(m.2$Gsq,m.3$Gsq,m.4$Gsq),3)
# Chi-squared test (now don't have to do it manually)
Chisq<-round(c(m.2$Chisq,m.3$Chisq,m.4$Chisq),3)
# DoF
df<-c(m.2$resid.df,m.3$resid.df,m.4$resid.df)
# p-value - we are in the right tail
pvalue<-round(1-pchisq(Chisq,df),4)
# AIC/BIC
AIC<-round(c(m.2$aic,m.3$aic,m.4$aic),3)
BIC<-round(c(m.2$bic,m.3$bic,m.4$bic),3)
# Summary table
summary<-data.frame(K,llik,npar,Gsq,Chisq,df,pvalue,AIC,BIC)
summary
round(m.3$P,4)
lapply(m.3$probs,round,4)
summary
probs.start.m3<-m.3$probs.start
probs.start.m3<-m.3$probs.start
new.probs.start.m3<-poLCA.reorder(probs.start.m3,order(m.3$P))
probs.start.m3
m.3.ord<-poLCA(formula,carcinoma,nclass=3,probs.start=new.probs.start.m3,verbose=FALSE)
# Refit the model, but use the ordered solutions in 'probs.start' argument
m.3.ord<-poLCA(formula,carcinoma,nclass=3,probs.start=new.probs.start.m3,verbose=FALSE)
round(m.3.ord$P,4)
round(m.3$P,4) # exctract prior probabilities
round(m.3.ord$P,4)
head(carcinoma)
p.dnc1<-m.3$P[1]*m.3$probs$A[1,1]*m.3$probs$B[1,1]*m.3$probs$C[1,1]*m.3$probs$D[1,1]*m.3$probs$E[1,1]*m.3$probs$F[1,1]*m.3$probs$G[1,1]
m.3$P[1]
p.dnc2<-m.3$P[2]*m.3$probs$A[2,1]*m.3$probs$B[2,1]*m.3$probs$C[2,1]*m.3$probs$D[2,1]*m.3$probs$E[2,1]*m.3$probs$F[2,1]*m.3$probs$G[2,1]
p.dnc3<-m.3$P[3]*m.3$probs$A[3,1]*m.3$probs$B[3,1]*m.3$probs$C[3,1]*m.3$probs$D[3,1]*m.3$probs$E[3,1]*m.3$probs$F[3,1]*m.3$probs$G[3,1]
p.dn<-p.dnc1+p.dnc2+p.dnc3
round(p.dn,4)
# 33.8491
118*p.dn
round(p.dn*m.3$N,4)
m.3$N
post.1<-m.3.ord$posterior[1,]
post.1<-m.3.ord$posterior[1,] # posterioir of the first response pattern
# (= agreement in a negative diagnosis)
round(post.1,5)
# create a frequency table of this predicted class
table(m.3.ord$predclass)
# Select the samples of tissues allocated to the class of inconsistent diagnosis
# and evaluate the correspondent response pattern.
sel<-carcinoma[m.3.ord$predclass==1,] # select all tissues with predicted
# class==1
sel
# Now, taking advantgae of this solution (knowing which items relate to which
# class), and try the underlying variable approach, and show it it relates to
data = read.table("scieR.txt", header=T)
setwd('C:\\Users\\maxim\\Documents\\Unibo\\3_Latent Variables_85177\\Lab3\\Example UVA')
# Now, taking advantgae of this solution (knowing which items relate to which
# class), and try the underlying variable approach, and show it it relates to
data = read.table("scieR.txt", header=T)
# Now, taking advantgae of this solution (knowing which items relate to which
# class), and try the underlying variable approach, and show it it relates to
data = read.table("scieR.txt", header=T)
# Now, taking advantgae of this solution (knowing which items relate to which
# class), and try the underlying variable approach, and show it it relates to
data = read.table("scieR.dat", header=T)
# Now, taking advantgae of this solution (knowing which items relate to which
# class), and try the underlying variable approach, and show it it relates to
data = read.table("scie7i.dat", header=T)
# Model 1 factor
model.f1 = 'f1=~x1+x3+x4+x7'
t = cfa(model.f1,data= data[,c(1,3,4,7)],
ordered=c("x1","x3","x4","x7"), std.lv = TRUE)
t = cfa(model.f1,data= data[,c(1,3,4,7)],
ordered=c("V1","V3","V4","V7"), std.lv = TRUE)
library(lavaan)
install.packages('lavaan')
library(lavaan)
t = cfa(model.f1,data= data[,c(1,3,4,7)],
ordered=c("V1","V3","V4","V7"), std.lv = TRUE)
t = cfa(model.f1,data= data[,c(1,3,4,7)],
ordered=c("x1","x3","x4","x7"), std.lv = TRUE)
View(data)
colnames(data)
t = cfa(model.f1,data= data[,c(1,3,4,7)],
ordered=colnames(data), std.lv = TRUE)
# Now, taking advantage of this solution (knowing which items relate to which
# class), and try the underlying variable approach, and show it it relates to
data = read.table("scie7i.dat", header=F)
# 1.) Model 1 factor ####
model.f1 = 'f1=~x1+x3+x4+x7'
t = cfa(model.f1,data= data[,c(1,3,4,7)],
ordered=c("x1","x3","x4","x7"), std.lv = TRUE)
colnames(data)
t = cfa(model.f1,data= data[,c(1,3,4,7)],
ordered=c("V1","V3","V4","V7"), std.lv = TRUE)
# 1.) Model 1 factor ####
model.f1 = 'f1=~V1+V3+V4+V7'
t = cfa(model.f1,data= data[,c(1,3,4,7)],
ordered=c("V1","V3","V4","V7"), std.lv = TRUE)
fit = cfa(model.f1,data= data[,c(1,3,4,7)],
ordered=c("V1","V3","V4","V7"), std.lv = TRUE)
summary(fit, fit.measures=TRUE)
t2 = cfa(model.f2,data= data[,c(1,2,3,4,5,6,7)],
ordered=c("V1","V2","V3","V4","V5","V6","V7"), std.lv = TRUE)
# 2.) Model 2 factor ####
model.f2 = 'f1=~V1+V3+V4+V7
f2=~V2+V5+V6'
t2 = cfa(model.f2,data= data[,c(1,2,3,4,5,6,7)],
ordered=c("V1","V2","V3","V4","V5","V6","V7"), std.lv = TRUE)
summary(fit2,fit.measures=TRUE)
fit2 = cfa(model.f2,data= data[,c(1,2,3,4,5,6,7)],
ordered=c("V1","V2","V3","V4","V5","V6","V7"), std.lv = TRUE)
summary(fit2,fit.measures=TRUE)
